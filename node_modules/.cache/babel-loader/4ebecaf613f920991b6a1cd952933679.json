{"remainingRequest":"C:\\Users\\85219\\Desktop\\AlaskaVue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\85219\\Desktop\\AlaskaVue\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\85219\\Desktop\\AlaskaVue\\src\\store\\store.js","dependencies":[{"path":"C:\\Users\\85219\\Desktop\\AlaskaVue\\src\\store\\store.js","mtime":1567502028000},{"path":"C:\\Users\\85219\\Desktop\\AlaskaVue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\85219\\Desktop\\AlaskaVue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\85219\\Desktop\\AlaskaVue\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Vue from 'vue';\nimport Vuex from 'vuex';\nimport { mutations } from \"./mutations\";\nimport { actions } from \"./actions\";\nimport constants from \"../assets/data/constants\";\nVue.use(Vuex);\n/**\r\n * Vue의 상태관리를 담당함\r\n * 컴포넌트 간의 통신이나 데이터 전달을 좀 더 유기적으로 관리\r\n * 컴포넌트 간 데이터 전달 및 이벤트 통신 등의 여러 컴포넌트의 공통 데이터 상태를 관리함\r\n *\r\n * @type {Store<{counter: number}>}\r\n */\n\nexport var store = new Vuex.Store({\n  /**\r\n   * component 간 공유될 data를 관리\r\n   * 예)\r\n   * this.$store.state.CONSTANTS;\r\n   */\n  state: {\n    counter: 1,\n    CONSTANTS: constants\n  },\n\n  /**\r\n   * 각 컴포넌트에서 Vuex의 데이터를 접근할 때 중복된 코드를 반복호출 하게 될 때 여기서 정의 해 중복을 없앤다.\r\n   * 데이터 호출에 관련된 중복 공통 로직이 정의 됨\r\n   * 예)\r\n   * this.$store.getters.CONSTANTS\r\n   */\n  getters: {\n    CONSTANTS: function CONSTANTS(state) {\n      return state.CONSTANTS;\n    },\n    getDoubleCounter: function getDoubleCounter(state) {\n      return state.counter * 2;\n    }\n  },\n  mutations: mutations,\n  actions: actions\n});",{"version":3,"sources":["C:\\Users\\85219\\Desktop\\AlaskaVue\\src\\store\\store.js"],"names":["Vue","Vuex","mutations","actions","constants","use","store","Store","state","counter","CONSTANTS","getters","getDoubleCounter"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,SAAT;AACA,SAASC,OAAT;AACA,OAAOC,SAAP;AAEAJ,GAAG,CAACK,GAAJ,CAAQJ,IAAR;AAEA;;;;;;;;AAOA,OAAO,IAAMK,KAAK,GAAG,IAAIL,IAAI,CAACM,KAAT,CAAe;AAEhC;;;;;AAKAC,EAAAA,KAAK,EAAE;AACHC,IAAAA,OAAO,EAAE,CADN;AAEHC,IAAAA,SAAS,EAAEN;AAFR,GAPyB;;AAWhC;;;;;;AAMAO,EAAAA,OAAO,EAAE;AACLD,IAAAA,SAAS,EAAE,mBAAAF,KAAK,EAAI;AAChB,aAAOA,KAAK,CAACE,SAAb;AACH,KAHI;AAILE,IAAAA,gBAAgB,EAAE,0BAAAJ,KAAK,EAAI;AACvB,aAAOA,KAAK,CAACC,OAAN,GAAgB,CAAvB;AACH;AANI,GAjBuB;AAyBhCP,EAAAA,SAAS,EAAEA,SAzBqB;AA0BhCC,EAAAA,OAAO,EAAEA;AA1BuB,CAAf,CAAd","sourcesContent":["import Vue from 'vue';\r\nimport Vuex from 'vuex';\r\nimport { mutations } from \"./mutations\";\r\nimport { actions } from \"./actions\";\r\nimport constants from \"../assets/data/constants\";\r\n\r\nVue.use(Vuex);\r\n\r\n/**\r\n * Vue의 상태관리를 담당함\r\n * 컴포넌트 간의 통신이나 데이터 전달을 좀 더 유기적으로 관리\r\n * 컴포넌트 간 데이터 전달 및 이벤트 통신 등의 여러 컴포넌트의 공통 데이터 상태를 관리함\r\n *\r\n * @type {Store<{counter: number}>}\r\n */\r\nexport const store = new Vuex.Store({\r\n\r\n    /**\r\n     * component 간 공유될 data를 관리\r\n     * 예)\r\n     * this.$store.state.CONSTANTS;\r\n     */\r\n    state: {\r\n        counter: 1,\r\n        CONSTANTS: constants\r\n    },\r\n    /**\r\n     * 각 컴포넌트에서 Vuex의 데이터를 접근할 때 중복된 코드를 반복호출 하게 될 때 여기서 정의 해 중복을 없앤다.\r\n     * 데이터 호출에 관련된 중복 공통 로직이 정의 됨\r\n     * 예)\r\n     * this.$store.getters.CONSTANTS\r\n     */\r\n    getters: {\r\n        CONSTANTS: state => {\r\n            return state.CONSTANTS;\r\n        },\r\n        getDoubleCounter: state => {\r\n            return state.counter * 2;\r\n        }\r\n    },\r\n    mutations: mutations,\r\n    actions: actions\r\n});\r\n"]}]}