{"remainingRequest":"C:\\Users\\85219\\Desktop\\vue_test\\AlaskaVue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\85219\\Desktop\\vue_test\\AlaskaVue\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\85219\\Desktop\\vue_test\\AlaskaVue\\src\\utils\\logUtil.js","dependencies":[{"path":"C:\\Users\\85219\\Desktop\\vue_test\\AlaskaVue\\src\\utils\\logUtil.js","mtime":1567991662000},{"path":"C:\\Users\\85219\\Desktop\\vue_test\\AlaskaVue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\85219\\Desktop\\vue_test\\AlaskaVue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\85219\\Desktop\\vue_test\\AlaskaVue\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _classCallCheck from \"C:\\\\Users\\\\85219\\\\Desktop\\\\vue_test\\\\AlaskaVue\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\85219\\\\Desktop\\\\vue_test\\\\AlaskaVue\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/createClass\";\n\n/**\r\n * @typeof {boolean} debug : true, false\r\n * @typeof {Number} debugLevel : ERROR(0), WARN(1), INFO(2), DEBUG(3)\r\n * @typeof {String} logPrefix : \"SAMPLE\"\r\n */\nexport var LogUtil =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * 생성자\r\n   * @typeof {boolean} debug : true, false\r\n   * @typeof {Number} debugLevel : ERROR(0), WARN(1), INFO(2), DEBUG(3)\r\n   * @typeof {String} logPrefix : \"SAMPLE\"\r\n   */\n  function LogUtil(bool_debug, num_debugLevel, str_logPrefix) {\n    _classCallCheck(this, LogUtil);\n\n    this.debugMode = bool_debug;\n    this.debugLevel = num_debugLevel;\n    this.logPrefix = str_logPrefix;\n    this.ERROR = 0;\n    this.WARN = 1;\n    this.INFO = 2;\n    this.DEBUG = 3;\n  }\n\n  _createClass(LogUtil, [{\n    key: \"isDebug\",\n    value: function isDebug(type) {\n      if (!this.debugMode || this.debugLevel < type) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"convertDate\",\n    value: function convertDate() {\n      var date = new Date(); //let m = this.convertTime(date.getMonth()+1);\n      //let d = this.convertTime(date.getDate());\n\n      var h = this.convertTime(date.getHours());\n      var i = this.convertTime(date.getMinutes());\n      var s = this.convertTime(date.getSeconds()); //return `${date.getFullYear()}-${m}-${d} ${h}:${i}:${s}`; // 날짜 포함\n\n      return \"\".concat(h, \":\").concat(i, \":\").concat(s); //        return date.getFullYear()+'-'+(m>9?m:'0'+m)+'-'+(d>9?d:'0'+d)+' '+(h>9?h:'0'+h)+':'+(i>9?i:'0'+i)+':'+(s>9?s:'0'+s); //혹시 모를 이전 브라우저 지원을 위해 남김\n    }\n    /**\r\n     * 로그에 시간값 표출을 위해 제작\r\n     * @param value\r\n     * @returns {string}\r\n     */\n\n  }, {\n    key: \"convertTime\",\n    value: function convertTime(value) {\n      var rst = value;\n      return rst > 9 ? rst : '0' + rst;\n    }\n  }, {\n    key: \"log\",\n    get: function get() {\n      if (!this.isDebug(this.DEBUG)) {\n        return function () {};\n      }\n\n      var logPrefix = this.logPrefix + \"[\".concat(this.convertDate(), \"]:\");\n\n      if (logPrefix.length) {\n        return window.console.log.bind(window.console, logPrefix);\n      } else {\n        return window.console.log.bind(window.console);\n      }\n    }\n  }, {\n    key: \"info\",\n    get: function get() {\n      if (!this.isDebug(this.INFO)) {\n        return function () {};\n      }\n\n      var logPrefix = this.logPrefix + \"[\".concat(this.convertDate(), \"]:\");\n\n      if (logPrefix.length) {\n        return window.console.info.bind(window.console, logPrefix);\n      } else {\n        return window.console.info.bind(window.console);\n      }\n    }\n  }, {\n    key: \"warn\",\n    get: function get() {\n      if (!this.isDebug(this.WARN)) {\n        return function () {};\n      }\n\n      var logPrefix = this.logPrefix + \"[\".concat(this.convertDate(), \"]:\");\n\n      if (logPrefix.length) {\n        return window.console.warn.bind(window.console, logPrefix);\n      } else {\n        return window.console.warn.bind(window.console);\n      }\n    }\n  }, {\n    key: \"error\",\n    get: function get() {\n      if (!this.isDebug(this.ERROR)) {\n        return function () {};\n      }\n\n      var logPrefix = this.logPrefix + \"[\".concat(this.convertDate(), \"]:\");\n\n      if (logPrefix.length) {\n        return window.console.error.bind(window.console, logPrefix);\n      } else {\n        return window.console.error.bind(window.console);\n      }\n    }\n  }, {\n    key: \"count\",\n    get: function get() {\n      if (!this.isDebug(this.DEBUG)) {\n        return function () {};\n      }\n\n      var logPrefix = this.logPrefix + \"[\".concat(this.convertDate(), \"]:\");\n\n      if (logPrefix.length) {\n        return window.console.count.bind(window.console, logPrefix);\n      } else {\n        return window.console.count.bind(window.console);\n      }\n    }\n  }]);\n\n  return LogUtil;\n}(); //\n// const logUtil = /** @class */ (function () {\n//\n//     function LogUtil(debug, debugLevel, logPrefix) {\n//         this.debugMode = debug;\n//         this.debugLevel = debugLevel;\n//         this.logPrefix = '';\n//\n//         if(logPrefix) {\n//             this.logPrefix = \"[\" + logPrefix + \"]\";\n//         }\n//     }\n//     Object.defineProperty(LogUtil.prototype, \"log\", {\n//         get: function () {\n//\n//             //if (!isDebug) {\n//             if (!this.debugMode) {\n//                 return function () { };\n//             }\n//             let logPrefix = this.logPrefix + `[${now()}]:`;\n//             if (logPrefix.length) {\n//                 return console.log.bind(window.console, logPrefix);\n//             }\n//             else {\n//                 return console.log.bind(window.console);\n//             }\n//         },\n//         enumerable: true,\n//         configurable: true\n//     });\n//\n//     Object.defineProperty(LogUtil.prototype, \"warn\", {\n//         get: function () {\n//             if (!this.debugMode) {\n//                 return function () { };\n//             }\n//             let logPrefix = this.logPrefix + `[${now()}]:`;\n//             if (logPrefix.length) {\n//                 return console.warn.bind(window.console, logPrefix);\n//             }\n//             else {\n//                 return console.warn.bind(window.console);\n//             }\n//         },\n//         enumerable: true,\n//         configurable: true\n//     });\n//     Object.defineProperty(LogUtil.prototype, \"dir\", {\n//         get: function () {\n//             if (!this.debugMode) {\n//                 return function () { };\n//             }\n//             let logPrefix = this.logPrefix + `[${now()}]:`;\n//             if (logPrefix.length) {\n//                 return console.dir.bind(window.console, logPrefix);\n//             }\n//             else {\n//                 return console.dir.bind(window.console);\n//             }\n//         },\n//         enumerable: true,\n//         configurable: true\n//     });\n//\n//     Object.defineProperty(LogUtil.prototype, \"error\", {\n//         get: function () {\n//             if (!this.debugMode) {\n//                 return function () { };\n//             }\n//             let logPrefix = this.logPrefix + `[${now()}]:`;\n//             if (logPrefix.length) {\n//                 return console.error.bind(window.console, logPrefix);\n//             }\n//             else {\n//                 return console.error.bind(window.console);\n//             }\n//         },\n//         enumerable: true,\n//         configurable: true\n//     });\n//\n//     Object.defineProperty(LogUtil.prototype, \"info\", {\n//         get: function () {\n//             if (!this.debugMode) {\n//                 return function () { };\n//             }\n//             let logPrefix = this.logPrefix + `[${now()}]:`;\n//             if (logPrefix.length) {\n//                 return console.info.bind(window.console, logPrefix);\n//             }\n//             else {\n//                 return console.info.bind(window.console);\n//             }\n//         },\n//         enumerable: true,\n//         configurable: true\n//     });\n//\n//     Object.defineProperty(LogUtil.prototype, \"trace\", {\n//         get: function () {\n//             if (!this.debugMode) {\n//                 return function () { };\n//             }\n//             let logPrefix = this.logPrefix + `[${now()}]:`;\n//             if (logPrefix.length) {\n//                 return console.trace.bind(window.console, logPrefix);\n//             }\n//             else {\n//                 return console.trace.bind(window.console);\n//             }\n//         },\n//         enumerable: true,\n//         configurable: true\n//     });\n//\n//     Object.defineProperty(LogUtil.prototype, \"count\", {\n//         get: function () {\n//             if (!this.debugMode) {\n//                 return function () { };\n//             }\n//             let logPrefix = this.logPrefix + `[${now()}]:`;\n//             if (logPrefix.length) {\n//                 return console.count.bind(window.console, logPrefix);\n//             }\n//             else {\n//                 return console.count.bind(window.console);\n//             }\n//         },\n//         enumerable: true,\n//         configurable: true\n//     });\n//\n//     Object.defineProperty(LogUtil.prototype, \"assert\", {\n//         get: function () {\n//             if (!this.debugMode) {\n//                 return function () { };\n//             }\n//             let logPrefix = this.logPrefix + `[${now()}]:`;\n//             if (logPrefix.length) {\n//                 return console.assert.bind(window.console);\n//             }\n//             else {\n//                 return console.assert.bind(window.console);\n//             }\n//         },\n//         enumerable: true,\n//         configurable: true\n//     });\n//\n//     Object.defineProperty(LogUtil.prototype, \"time\", {\n//         get: function () {\n//             if (!this.debugMode) {\n//                 return function () { };\n//             }\n//             let logPrefix = this.logPrefix + `[${now()}]:`;\n//             if (logPrefix.length) {\n//                 return console.time.bind(window.console);\n//             }\n//             else {\n//                 return console.time.bind(window.console);\n//             }\n//         },\n//         enumerable: true,\n//         configurable: true\n//     });\n//\n//     Object.defineProperty(LogUtil.prototype, \"timeEnd\", {\n//         get: function () {\n//             if (!this.debugMode) {\n//                 return function () { };\n//             }\n//             let logPrefix = this.logPrefix + `[${now()}]:`;\n//             if (logPrefix.length) {\n//                 return console.timeEnd.bind(window.console);\n//             }\n//             else {\n//                 return console.timeEnd.bind(window.console);\n//             }\n//         },\n//         enumerable: true,\n//         configurable: true\n//     });\n//\n//     function now()  {\n//         let date = new Date();\n//         let m = convertTime(date.getMonth()+1);\n//         let d = convertTime(date.getDate());\n//         let h = convertTime(date.getHours());\n//         let i = convertTime(date.getMinutes());\n//         let s = convertTime(date.getSeconds());\n//         //return `${date.getFullYear()}-${m}-${d} ${h}:${i}:${s}`; // 날짜 포함\n//         return `${h}:${i}:${s}`;\n// //        return date.getFullYear()+'-'+(m>9?m:'0'+m)+'-'+(d>9?d:'0'+d)+' '+(h>9?h:'0'+h)+':'+(i>9?i:'0'+i)+':'+(s>9?s:'0'+s); //혹시 모를 이전 브라우저 지원을 위해 남김\n//     }\n//     /**\n//      * 로그에 시간값 표출을 위해 제작\n//      * @param value\n//      * @returns {string}\n//      */\n//     function convertTime(value) {\n//         let rst = value;\n//         return (rst>9?rst:'0'+rst);\n//      }\n//     return LogUtil;\n// }());\n// window.LogUtil = {\n//     DEBUG: true,\n//     DEBUG_LEVEL: 4,\n//     LOG_PREFIX: \"[SAMPLE]\",\n//\n//     /**\n//      * console.log 사용\n//      *\n//      */\n//     get log(): Function {\n//         if (this.DEBUG && this.DEBUG_LEVEL > 3) {\n//             // Convert args to a normal array\n//             let args = Array.prototype.slice.call(arguments);\n//             console.log.apply(console, this.convertArgs(args));\n//         }\n//     },\n//\n//     /**\n//      * console.info 사용\n//      */\n//     info: function() {\n//\n//         if (this.DEBUG && this.DEBUG_LEVEL > 2) {\n//             // Convert args to a normal array\n//             let args = Array.prototype.slice.call(arguments);\n//             console.info.apply(console, this.convertArgs(args));\n//         }\n//     },\n//\n//     /**\n//      * console.warn 사용\n//      */\n//     warn: function() {\n//         if (this.DEBUG && this.DEBUG_LEVEL > 1) {\n//             let args = Array.prototype.slice.call(arguments);\n//             console.warn.apply(console, this.convertArgs(args));\n//         }\n//     },\n//\n//     /**\n//      * console.err 사용\n//      */\n//     err: function() {\n//         if (this.DEBUG && this.DEBUG_LEVEL > 0) {\n//             let args = Array.prototype.slice.call(arguments);\n//             console.error.apply(console, this.convertArgs(args));\n//         }\n//     },\n//\n//     /**\n//      * time사용\n//      */\n//     time: function(value) {\n//         if (this.DEBUG && this.DEBUG_LEVEL > 0) {\n//             console.time(value);\n//         }\n//     },\n//\n//     timeEnd: function(value) {\n//         if (this.DEBUG && this.DEBUG_LEVEL > 0) {\n//             console.timeEnd(value);\n//         }\n//     },\n//\n//     now: function() {\n//         let date = new Date();\n//         let m = this.convertTime(date.getMonth()+1);\n//         let d = this.convertTime(date.getDate());\n//         let h = this.convertTime(date.getHours());\n//         let i = this.convertTime(date.getMinutes());\n//         let s = this.convertTime(date.getSeconds());\n//         //return `${date.getFullYear()}-${m}-${d} ${h}:${i}:${s}`; // 날짜 포함\n//         return `${m}-${d} ${h}:${i}:${s}`;\n// //        return date.getFullYear()+'-'+(m>9?m:'0'+m)+'-'+(d>9?d:'0'+d)+' '+(h>9?h:'0'+h)+':'+(i>9?i:'0'+i)+':'+(s>9?s:'0'+s); //혹시 모를 이전 브라우저 지원을 위해 남김\n//     },\n//\n//     /**\n//      * 로그 PREFIX 정보\n//      * @param value\n//      * @returns {*}\n//      */\n//     convertArgs: function(value) {\n//         let rst = value;\n//         rst.unshift(`${this.LOG_PREFIX}[${this.now()}][${this.callerName()}]\\n:`);\n//         // Convert args to a normal array\n//         //let args = Array.prototype.slice.call(arguments);\n//\n//         // Prepend log prefix log string\n//         return rst;\n//     },\n//\n//     /**\n//      * 로그에 시간값 표출을 위해 제작\n//      * @param value\n//      * @returns {string}\n//      */\n//     convertTime: function(value) {\n//         let rst = value;\n//         return (rst>9?rst:'0'+rst);\n//     },\n//\n//     /**\n//      * 호출 경로를 추적 기능을 제공\n//      * @returns {string}\n//      */\n//     callerName: function () {\n//         try {\n//             throw new Error();\n//         } catch (e) {\n//             try {\n//                 console.log(e);\n//                 return e.stack.split('at ')[4].trimEnd();\n//                 //return e.stack.split('at ')[3].split(' ')[0];\n//             } catch (e) {\n//                 return '';\n//             }\n//         }\n//     },\n//\n//     setDebugMode: function(boolean) {\n//         this.DEBUG = boolean;\n//     },\n//\n//     setDebugLevel: function(number) {\n//         this.DEBUG_LEVEL = number;\n//     }\n// }",{"version":3,"sources":["C:\\Users\\85219\\Desktop\\vue_test\\AlaskaVue\\src\\utils\\logUtil.js"],"names":["LogUtil","bool_debug","num_debugLevel","str_logPrefix","debugMode","debugLevel","logPrefix","ERROR","WARN","INFO","DEBUG","type","date","Date","h","convertTime","getHours","i","getMinutes","s","getSeconds","value","rst","isDebug","convertDate","length","window","console","log","bind","info","warn","error","count"],"mappings":"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":["/**\r\n * @typeof {boolean} debug : true, false\r\n * @typeof {Number} debugLevel : ERROR(0), WARN(1), INFO(2), DEBUG(3)\r\n * @typeof {String} logPrefix : \"SAMPLE\"\r\n */\r\nexport class LogUtil {\r\n\r\n    /**\r\n     * 생성자\r\n     * @typeof {boolean} debug : true, false\r\n     * @typeof {Number} debugLevel : ERROR(0), WARN(1), INFO(2), DEBUG(3)\r\n     * @typeof {String} logPrefix : \"SAMPLE\"\r\n     */\r\n    constructor(bool_debug, num_debugLevel, str_logPrefix) {\r\n        this.debugMode = bool_debug;\r\n        this.debugLevel = num_debugLevel;\r\n        this.logPrefix = str_logPrefix;\r\n        this.ERROR = 0;\r\n        this.WARN = 1;\r\n        this.INFO = 2;\r\n        this.DEBUG = 3;\r\n\r\n    }\r\n\r\n    get log() {\r\n        if(!this.isDebug(this.DEBUG)) {\r\n            return () => { };\r\n        }\r\n        let logPrefix = this.logPrefix + `[${this.convertDate()}]:`;\r\n        if (logPrefix.length) {\r\n            return window.console.log.bind(window.console, logPrefix);\r\n        }\r\n        else {\r\n            return window.console.log.bind(window.console);\r\n        }\r\n    }\r\n\r\n    get info() {\r\n        if(!this.isDebug(this.INFO)) {\r\n            return () => { };\r\n        }\r\n        let logPrefix = this.logPrefix + `[${this.convertDate()}]:`;\r\n        if (logPrefix.length) {\r\n            return window.console.info.bind(window.console, logPrefix);\r\n        }\r\n        else {\r\n            return window.console.info.bind(window.console);\r\n        }\r\n    }\r\n\r\n    get warn() {\r\n        if(!this.isDebug(this.WARN)) {\r\n            return () => { };\r\n        }\r\n        let logPrefix = this.logPrefix + `[${this.convertDate()}]:`;\r\n        if (logPrefix.length) {\r\n            return window.console.warn.bind(window.console, logPrefix);\r\n        }\r\n        else {\r\n            return window.console.warn.bind(window.console);\r\n        }\r\n    }\r\n\r\n    get error() {\r\n        if(!this.isDebug(this.ERROR)) {\r\n            return () => { };\r\n        }\r\n        let logPrefix = this.logPrefix + `[${this.convertDate()}]:`;\r\n        if (logPrefix.length) {\r\n            return window.console.error.bind(window.console, logPrefix);\r\n        }\r\n        else {\r\n            return window.console.error.bind(window.console);\r\n        }\r\n    }\r\n\r\n    get count() {\r\n        if(!this.isDebug(this.DEBUG)) {\r\n            return () => { };\r\n        }\r\n        let logPrefix = this.logPrefix + `[${this.convertDate()}]:`;\r\n        if (logPrefix.length) {\r\n            return window.console.count.bind(window.console, logPrefix);\r\n        }\r\n        else {\r\n            return window.console.count.bind(window.console);\r\n        }\r\n    }\r\n\r\n    isDebug(type) {\r\n\r\n        if((!this.debugMode) || (this.debugLevel < type)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    convertDate()  {\r\n        let date = new Date();\r\n        //let m = this.convertTime(date.getMonth()+1);\r\n        //let d = this.convertTime(date.getDate());\r\n        let h = this.convertTime(date.getHours());\r\n        let i = this.convertTime(date.getMinutes());\r\n        let s = this.convertTime(date.getSeconds());\r\n        //return `${date.getFullYear()}-${m}-${d} ${h}:${i}:${s}`; // 날짜 포함\r\n        return `${h}:${i}:${s}`;\r\n//        return date.getFullYear()+'-'+(m>9?m:'0'+m)+'-'+(d>9?d:'0'+d)+' '+(h>9?h:'0'+h)+':'+(i>9?i:'0'+i)+':'+(s>9?s:'0'+s); //혹시 모를 이전 브라우저 지원을 위해 남김\r\n    }\r\n\r\n    /**\r\n     * 로그에 시간값 표출을 위해 제작\r\n     * @param value\r\n     * @returns {string}\r\n     */\r\n    convertTime(value) {\r\n        let rst = value;\r\n        return (rst>9?rst:'0'+rst);\r\n     }\r\n}\r\n\r\n//\r\n// const logUtil = /** @class */ (function () {\r\n//\r\n//     function LogUtil(debug, debugLevel, logPrefix) {\r\n//         this.debugMode = debug;\r\n//         this.debugLevel = debugLevel;\r\n//         this.logPrefix = '';\r\n//\r\n//         if(logPrefix) {\r\n//             this.logPrefix = \"[\" + logPrefix + \"]\";\r\n//         }\r\n//     }\r\n//     Object.defineProperty(LogUtil.prototype, \"log\", {\r\n//         get: function () {\r\n//\r\n//             //if (!isDebug) {\r\n//             if (!this.debugMode) {\r\n//                 return function () { };\r\n//             }\r\n//             let logPrefix = this.logPrefix + `[${now()}]:`;\r\n//             if (logPrefix.length) {\r\n//                 return console.log.bind(window.console, logPrefix);\r\n//             }\r\n//             else {\r\n//                 return console.log.bind(window.console);\r\n//             }\r\n//         },\r\n//         enumerable: true,\r\n//         configurable: true\r\n//     });\r\n//\r\n//     Object.defineProperty(LogUtil.prototype, \"warn\", {\r\n//         get: function () {\r\n//             if (!this.debugMode) {\r\n//                 return function () { };\r\n//             }\r\n//             let logPrefix = this.logPrefix + `[${now()}]:`;\r\n//             if (logPrefix.length) {\r\n//                 return console.warn.bind(window.console, logPrefix);\r\n//             }\r\n//             else {\r\n//                 return console.warn.bind(window.console);\r\n//             }\r\n//         },\r\n//         enumerable: true,\r\n//         configurable: true\r\n//     });\r\n//     Object.defineProperty(LogUtil.prototype, \"dir\", {\r\n//         get: function () {\r\n//             if (!this.debugMode) {\r\n//                 return function () { };\r\n//             }\r\n//             let logPrefix = this.logPrefix + `[${now()}]:`;\r\n//             if (logPrefix.length) {\r\n//                 return console.dir.bind(window.console, logPrefix);\r\n//             }\r\n//             else {\r\n//                 return console.dir.bind(window.console);\r\n//             }\r\n//         },\r\n//         enumerable: true,\r\n//         configurable: true\r\n//     });\r\n//\r\n//     Object.defineProperty(LogUtil.prototype, \"error\", {\r\n//         get: function () {\r\n//             if (!this.debugMode) {\r\n//                 return function () { };\r\n//             }\r\n//             let logPrefix = this.logPrefix + `[${now()}]:`;\r\n//             if (logPrefix.length) {\r\n//                 return console.error.bind(window.console, logPrefix);\r\n//             }\r\n//             else {\r\n//                 return console.error.bind(window.console);\r\n//             }\r\n//         },\r\n//         enumerable: true,\r\n//         configurable: true\r\n//     });\r\n//\r\n//     Object.defineProperty(LogUtil.prototype, \"info\", {\r\n//         get: function () {\r\n//             if (!this.debugMode) {\r\n//                 return function () { };\r\n//             }\r\n//             let logPrefix = this.logPrefix + `[${now()}]:`;\r\n//             if (logPrefix.length) {\r\n//                 return console.info.bind(window.console, logPrefix);\r\n//             }\r\n//             else {\r\n//                 return console.info.bind(window.console);\r\n//             }\r\n//         },\r\n//         enumerable: true,\r\n//         configurable: true\r\n//     });\r\n//\r\n//     Object.defineProperty(LogUtil.prototype, \"trace\", {\r\n//         get: function () {\r\n//             if (!this.debugMode) {\r\n//                 return function () { };\r\n//             }\r\n//             let logPrefix = this.logPrefix + `[${now()}]:`;\r\n//             if (logPrefix.length) {\r\n//                 return console.trace.bind(window.console, logPrefix);\r\n//             }\r\n//             else {\r\n//                 return console.trace.bind(window.console);\r\n//             }\r\n//         },\r\n//         enumerable: true,\r\n//         configurable: true\r\n//     });\r\n//\r\n//     Object.defineProperty(LogUtil.prototype, \"count\", {\r\n//         get: function () {\r\n//             if (!this.debugMode) {\r\n//                 return function () { };\r\n//             }\r\n//             let logPrefix = this.logPrefix + `[${now()}]:`;\r\n//             if (logPrefix.length) {\r\n//                 return console.count.bind(window.console, logPrefix);\r\n//             }\r\n//             else {\r\n//                 return console.count.bind(window.console);\r\n//             }\r\n//         },\r\n//         enumerable: true,\r\n//         configurable: true\r\n//     });\r\n//\r\n//     Object.defineProperty(LogUtil.prototype, \"assert\", {\r\n//         get: function () {\r\n//             if (!this.debugMode) {\r\n//                 return function () { };\r\n//             }\r\n//             let logPrefix = this.logPrefix + `[${now()}]:`;\r\n//             if (logPrefix.length) {\r\n//                 return console.assert.bind(window.console);\r\n//             }\r\n//             else {\r\n//                 return console.assert.bind(window.console);\r\n//             }\r\n//         },\r\n//         enumerable: true,\r\n//         configurable: true\r\n//     });\r\n//\r\n//     Object.defineProperty(LogUtil.prototype, \"time\", {\r\n//         get: function () {\r\n//             if (!this.debugMode) {\r\n//                 return function () { };\r\n//             }\r\n//             let logPrefix = this.logPrefix + `[${now()}]:`;\r\n//             if (logPrefix.length) {\r\n//                 return console.time.bind(window.console);\r\n//             }\r\n//             else {\r\n//                 return console.time.bind(window.console);\r\n//             }\r\n//         },\r\n//         enumerable: true,\r\n//         configurable: true\r\n//     });\r\n//\r\n//     Object.defineProperty(LogUtil.prototype, \"timeEnd\", {\r\n//         get: function () {\r\n//             if (!this.debugMode) {\r\n//                 return function () { };\r\n//             }\r\n//             let logPrefix = this.logPrefix + `[${now()}]:`;\r\n//             if (logPrefix.length) {\r\n//                 return console.timeEnd.bind(window.console);\r\n//             }\r\n//             else {\r\n//                 return console.timeEnd.bind(window.console);\r\n//             }\r\n//         },\r\n//         enumerable: true,\r\n//         configurable: true\r\n//     });\r\n//\r\n//     function now()  {\r\n//         let date = new Date();\r\n//         let m = convertTime(date.getMonth()+1);\r\n//         let d = convertTime(date.getDate());\r\n//         let h = convertTime(date.getHours());\r\n//         let i = convertTime(date.getMinutes());\r\n//         let s = convertTime(date.getSeconds());\r\n//         //return `${date.getFullYear()}-${m}-${d} ${h}:${i}:${s}`; // 날짜 포함\r\n//         return `${h}:${i}:${s}`;\r\n// //        return date.getFullYear()+'-'+(m>9?m:'0'+m)+'-'+(d>9?d:'0'+d)+' '+(h>9?h:'0'+h)+':'+(i>9?i:'0'+i)+':'+(s>9?s:'0'+s); //혹시 모를 이전 브라우저 지원을 위해 남김\r\n//     }\r\n//     /**\r\n//      * 로그에 시간값 표출을 위해 제작\r\n//      * @param value\r\n//      * @returns {string}\r\n//      */\r\n//     function convertTime(value) {\r\n//         let rst = value;\r\n//         return (rst>9?rst:'0'+rst);\r\n//      }\r\n//     return LogUtil;\r\n// }());\r\n\r\n\r\n\r\n\r\n// window.LogUtil = {\r\n//     DEBUG: true,\r\n//     DEBUG_LEVEL: 4,\r\n//     LOG_PREFIX: \"[SAMPLE]\",\r\n//\r\n//     /**\r\n//      * console.log 사용\r\n//      *\r\n//      */\r\n//     get log(): Function {\r\n//         if (this.DEBUG && this.DEBUG_LEVEL > 3) {\r\n//             // Convert args to a normal array\r\n//             let args = Array.prototype.slice.call(arguments);\r\n//             console.log.apply(console, this.convertArgs(args));\r\n//         }\r\n//     },\r\n//\r\n//     /**\r\n//      * console.info 사용\r\n//      */\r\n//     info: function() {\r\n//\r\n//         if (this.DEBUG && this.DEBUG_LEVEL > 2) {\r\n//             // Convert args to a normal array\r\n//             let args = Array.prototype.slice.call(arguments);\r\n//             console.info.apply(console, this.convertArgs(args));\r\n//         }\r\n//     },\r\n//\r\n//     /**\r\n//      * console.warn 사용\r\n//      */\r\n//     warn: function() {\r\n//         if (this.DEBUG && this.DEBUG_LEVEL > 1) {\r\n//             let args = Array.prototype.slice.call(arguments);\r\n//             console.warn.apply(console, this.convertArgs(args));\r\n//         }\r\n//     },\r\n//\r\n//     /**\r\n//      * console.err 사용\r\n//      */\r\n//     err: function() {\r\n//         if (this.DEBUG && this.DEBUG_LEVEL > 0) {\r\n//             let args = Array.prototype.slice.call(arguments);\r\n//             console.error.apply(console, this.convertArgs(args));\r\n//         }\r\n//     },\r\n//\r\n//     /**\r\n//      * time사용\r\n//      */\r\n//     time: function(value) {\r\n//         if (this.DEBUG && this.DEBUG_LEVEL > 0) {\r\n//             console.time(value);\r\n//         }\r\n//     },\r\n//\r\n//     timeEnd: function(value) {\r\n//         if (this.DEBUG && this.DEBUG_LEVEL > 0) {\r\n//             console.timeEnd(value);\r\n//         }\r\n//     },\r\n//\r\n//     now: function() {\r\n//         let date = new Date();\r\n//         let m = this.convertTime(date.getMonth()+1);\r\n//         let d = this.convertTime(date.getDate());\r\n//         let h = this.convertTime(date.getHours());\r\n//         let i = this.convertTime(date.getMinutes());\r\n//         let s = this.convertTime(date.getSeconds());\r\n//         //return `${date.getFullYear()}-${m}-${d} ${h}:${i}:${s}`; // 날짜 포함\r\n//         return `${m}-${d} ${h}:${i}:${s}`;\r\n// //        return date.getFullYear()+'-'+(m>9?m:'0'+m)+'-'+(d>9?d:'0'+d)+' '+(h>9?h:'0'+h)+':'+(i>9?i:'0'+i)+':'+(s>9?s:'0'+s); //혹시 모를 이전 브라우저 지원을 위해 남김\r\n//     },\r\n//\r\n//     /**\r\n//      * 로그 PREFIX 정보\r\n//      * @param value\r\n//      * @returns {*}\r\n//      */\r\n//     convertArgs: function(value) {\r\n//         let rst = value;\r\n//         rst.unshift(`${this.LOG_PREFIX}[${this.now()}][${this.callerName()}]\\n:`);\r\n//         // Convert args to a normal array\r\n//         //let args = Array.prototype.slice.call(arguments);\r\n//\r\n//         // Prepend log prefix log string\r\n//         return rst;\r\n//     },\r\n//\r\n//     /**\r\n//      * 로그에 시간값 표출을 위해 제작\r\n//      * @param value\r\n//      * @returns {string}\r\n//      */\r\n//     convertTime: function(value) {\r\n//         let rst = value;\r\n//         return (rst>9?rst:'0'+rst);\r\n//     },\r\n//\r\n//     /**\r\n//      * 호출 경로를 추적 기능을 제공\r\n//      * @returns {string}\r\n//      */\r\n//     callerName: function () {\r\n//         try {\r\n//             throw new Error();\r\n//         } catch (e) {\r\n//             try {\r\n//                 console.log(e);\r\n//                 return e.stack.split('at ')[4].trimEnd();\r\n//                 //return e.stack.split('at ')[3].split(' ')[0];\r\n//             } catch (e) {\r\n//                 return '';\r\n//             }\r\n//         }\r\n//     },\r\n//\r\n//     setDebugMode: function(boolean) {\r\n//         this.DEBUG = boolean;\r\n//     },\r\n//\r\n//     setDebugLevel: function(number) {\r\n//         this.DEBUG_LEVEL = number;\r\n//     }\r\n// }"]}]}